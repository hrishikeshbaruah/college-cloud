#+TITLE: Design of the  College Cloud Edition 
#+AUTHOR: VLEAD
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Introduction 
  This document illustrates desing of building the College Cloud
  edition and post process workshop data
* Design of College Cloud 
  :PROPERTIES:
  :CUSTOM_ID: cc_design
  :END:    
  #+BEGIN_HTML
  <img src="../images/Design-of-Portable-Edition-2016-09-26.jpg">
  <p align="center"> Portable-media-diagram </p>
  #+END_HTML
  
  To edit the Portable-media-diagram image click [[https://docs.google.com/drawings/d/1JclZ3rZEktsJKVhDKr2DoKs1BBlRsc59NTX4Y9xKckI/edit][here]]

  #+BEGIN_HTML
  <img src="../images/Portable-media-cluster-design.jpg"> <p
  align="center"> Portable Edition's Cluster diagram </p>
  #+END_HTML
  
  To edit the Portable Edition's Cluster diagram image click [[https://docs.google.com/drawings/d/1UCEK7uTS01y4u_mo45G5kQW9WKa-QoPKoV0XyQxH_FI/edit][here]]

   
  - Wi-Fi Router :: Wi-Fi router resolves the domain name(FQDN) of the
              labs within the LAN network. And it allocates dhcp ips
              to the Vagrant boxes and to the users who wants to acces
              the labs. Configure the wi-fi router such that it has to
              provide 10.2.57.0/24 subnet ip range to its clients.

  - Portable edition of Virtual Labs :: 
       A portable edition, which contains Open edX platform and ported
       labs onto it. One vagrant box will be used for Open edX
       platform. Host machine will contain OpenVZ containers. Each
       container will have one lab. we call it as *Cluster*. You will
       read about the cluster later in this document.
       
       Static IP (10.2.57.61) will be assigned to this machine ( Host
       machine).

    + Vagrant Box (Open edX platform) ::
	 Virtual-Labs portable edition ,this box provides us Open edX
         platform with the labs ported onto it. For the simulations of
         experiments and for the images, this box contacts to
         *Cluster* for the labs over the LAN.

	 Static IP(10.2.57.65) is to be assigned to this box.
  
    + Cluster :: 
		 It runs on localhost (Host machine) and serves labs
                 to the Open edX platform. In this cluster, labs are
                 hosted/deployed locally on OpenVZ containers and also
                 runs server nodes. Each lab will have a separate
                 container so that we can avoid memory leakage issues
                 of the labs.
		 - Cluster server nodes are 
		   + Router :: is for forwarding incoming packets to
                               respective server nodes
		   + Reverse proxy :: Accepts http and https packets
                                      from router and forwards these
                                      packets to respective labs.
		   + Public DNS :: For external name resolution 
		   + Private DNS :: For internal name resolution

		   + ADS :: A service for hosting new labs inside the
                            cluster
	          
                   + Config-Server :: To configure cluster with
                                      automated scripts using ansible
                                      playbooks

		 Static IP(10.2.57.62) is to be assigned to Router
                 container.

		 Static IP(10.2.57.63) is to be assigned to
                 Config-server container.

  - DNS service :: Runs in separate container on localhost. This
                   service will be used by Wi-Fi router for name
                   resolution( To map IP with FQDN).
		   
		   DNS service will be configured using ansible
                   playbooks from config-server. Use =public_dns.yml=
                   playbook to configure DNS service
		   
		   Static IP :: 10.2.57.64
  - Nagios :: Nagios is a monitoring tool. Job of the nagios in this
              setup is to monitor system resources such as RAM,
              Processes,etc.
  
** Collection of logs in College Cloud
    :PROPERTIES:
    :CUSTOM_ID: cc_logs
    :END:    
   #+BEGIN_HTML
   <img src="https://docs.google.com/drawings/d/1rTyHXCOGJzBwJfAT4m7-5D_eVZTC5v0SRLCqvHpFOy8/pub?w=960&h=720">
   <p align="center"> Collect Logs in College Cloud </p>
   #+END_HTML

   A shell script is written to fetch logs (feedback, usages,
   user-data) in college cloud and it does the following -

   + Calls feedback-dump API to get feedbacks on mentioned date.
   + GET usages from Elasticsearch index /vlabs/usages for a given date.
   + Take edx user database dump.
   + Creates a =compressed file= containing all the logs, to be shared with Central team.
   + Compressed file will be named as =COLLEGE-NAME-DATE-datewise.tar.gz=

** Post Processing of College Cloud workshop data
    :PROPERTIES:
    :CUSTOM_ID: cc_post_process
    :END:    
   #+BEGIN_HTML
   <img src="https://docs.google.com/drawings/d/1xSelcS88k3ReNS3lNXMCkGyJO5eHs_1r4Q9EhvxY6Ds/pub?w=960&h=720">
   <p align="center"> Post Processing of College Cloud Workshop Data </p>
   #+END_HTML
   - A service which will push the pre-processed dump of feedbacks,
     usages and college cloud details (from =config=) to the central VLABS =Elastic
     Search= database.
   - API documentation can be found at  https://github.com/openedx-vlead/college-cloud/blob/cc-april-delhi/src/design/post-processing-api.org#introduction
   - This service internally uses =Elastic Search= provided APIs to
     dump the data as show in above diagram.
* Design of Collection of logs
  :PROPERTIES:
  :CUSTOM_ID: log_collection_design
  :END:    
* Design of College Cloud post process data
  :PROPERTIES:
  :CUSTOM_ID: post_process_design
  :END:    

** Get college registration form
  - URL :: /get_cc_reg_form
  - Method :: GET

  - URL Params ::  None
       
  - Success Response ::
    + Code: 200

    + Content :: 
      #+BEGIN_EXAMPLE
      A web page with college cloud registration form is shown.
      #+END_EXAMPLE

  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Not Authorized" }

    OR

    + Code: 400 Bad Request

    + Content: { error : "Malformed arguments" }

    OR

    + Code: 500

    + Content: { error : Exception String}


  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/get_college_reg_form
    #+END_EXAMPLE
** Store college registration form data to local =config.json= file

   - URL :: /store_cc_reg_form_data

   - Method :: POST

   - Data Params ::
     {
      'MAC_ID' : {
		   'college_details' : {
           		   'name': '<value>',
                           'location' : '<value>'
	 	    }
		 }
     }

   - Success Response ::
     + Code: 200

     + Content:
       #+BEGIN_EXAMPLE
       {
       "status" : "Successfully saved records"
       }
       
       #+END_EXAMPLE
   
  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Not Authorized error: not Authorized to perform this action" }

    OR

    + Code: 400 Bad Request

    + Content: { error : "Malformed arguments" }

    OR

    + Code: 500

    + Content: { error : Exception String}

  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/add_user
    #+END_EXAMPLE
** Get college cloud ID
  - URL :: /get_cc_id
  - Method :: GET

  - URL Params ::  None
       
  - Success Response ::
    + Code: 200

    + Content :: 
      #+BEGIN_EXAMPLE
      {
        'college_cloud_id' : '<value>'
      }
      #+END_EXAMPLE

  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Not Authorized" }

    OR

    + Code: 400 Bad Request

    + Content: { error : "Malformed arguments" }

    OR

    + Code: 500

    + Content: { error : Exception String}


  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/get_college_cloud_id
	      #+END_EXAMPLE

** Dump college cloud data to ELK

   - URL :: /save_cc_data_to_elk

   - Method :: POST

   - Data Params ::
     {
      'MAC_ID' : '<value>',
      'college_details' : {
           	   'name': '<value>',
                   'location' : '<value>'
	 	   }
     }

   - Success Response ::
     + Code: 200

     + Content:
       #+BEGIN_EXAMPLE
       {
       "status" : "Successfully saved records"
       }
       
       #+END_EXAMPLE
   
  - Error Response ::
    + Code: 401 UNAUTHORIZED

    + Content: { error : "Not Authorized error: not Authorized to perform this action" }

    OR

    + Code: 400 Bad Request

    + Content: { error : "Malformed arguments" }

    OR

    + Code: 500

    + Content: { error : Exception String}

  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/add_user
    #+END_EXAMPLE
** Dump feedback to ELK stack
  :PROPERTIES:
  :CUSTOM_ID: dump_feedback
  :END:    

   - URL :: /dump_feedback_to_elk

   - Method :: POST

   - Payload ::
     {
      'cc_reg_details' : [],	       
      'feedbacks': ['list_of_feedbacks']
     }

   - Success Response ::
     + Code: 200
     + Content:
       {
         status: "successfully added feedback records"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }

** Dump usage to ELK stack
  :PROPERTIES:
  :CUSTOM_ID: dump_usage
  :END:    

   - URL :: /dump_usage_to_elk

   - Method :: POST

   - Payload ::
     {
      'cc_reg_details': [],
      'usages': ['list_of_usages']      
     }

   - Success Response ::
     + Code: 200
     + Content:
       {
         status: "successfully added usage records"
       }

   - Error Response ::
     + Code: 401 UNAUTHORIZED

     + Content: { error : "Wrong Key configured" }

     OR

     + Code: 400 Bad Request

     + Content: { error : "some of the parameters are not part of the
       request" }

