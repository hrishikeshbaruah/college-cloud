#+TITLE: Implementation the  College Cloud Edition 
#+AUTHOR: VLEAD
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  The documentation describes implementation of the College Cloud
* Implementation College Cloud 
  Implementation is done based on the above design diagram.
  We need internet connection for
  - Setting up cluster
  - Hosting the labs in the cluster using ADS service
** Machine setup
   - Install CentOS-6.x Desktop
   - Update OS
     #+BEGIN_EXAMPLE
     yum update -y
     #+END_EXAMPLE

** Cluster setup
   - All server nodes are not needed for portable-media cluster setup
     . So comment =nagios_server=, =nagios_client=,
     =rsnapshot_server=, =rsnapshot_client=, =ossec_server= and
     =ossec_client= roles in following playbooks before running them.
   
   - In this cluster setup, we need only following server nodes.
     + Config-Server
     + Router
     + Public DNS
     + Private DNS 
     + Reverse proxy
     + ADS service

   - Use [[https://bitbucket.org/vlead/systems-model/src/97cc25543f8032cb84c1372c4c9ca170945f79a6/src/bootstrapping.org?at%3Ddevelop&fileviewer%3Dfile-view-default][bootstrapping steps]] till ADS server configuration for setting
     up cluster.  Cluster will have OpenVZ containers. Each server
     node will have a separate container and also for each lab.

   - Once you reach running =site.yaml= in bootstrapping steps, perform
     the following steps.     
     + Comment following servers in =site.yaml= file.
       #+BEGIN_EXAMPLE
       rsnapshot_server.yaml
       ossec_server.yaml
       nagios_server.yaml
       rsyslog_server.yaml
       lab_rsnapshot_server.yaml
       #- include: ads_server.yaml
       #+END_EXAMPLE
     + Comment all other nodes if there are any which are not needed
       for the portable media.
     + Set private dns ips and private-dns-zone as follows, and
       comment =private-dns-ips: none=, =private-dns-zone: none= in
       common_vars role.
       #+BEGIN_EXAMPLE
       private_dns_ips: 
          - 10.100.1.5
       private_dns_zone: "{{prefix}}virtual-labs.ac.in {{prefix}}vlabs.ac.in"
       #+END_EXAMPLE
     + Run site.yaml
       #+BEGIN_EXAMPLE
       ansible-playbook -i hosts --list-tasks --syntax-check site.yaml
       ansible-playbook -i hosts site.yaml
       #+END_EXAMPLE

** Open edX platform in a Vagrant Box 
*** Perform the below steps on host machine .
   - NOTE :: 
     + Minimum 1 Mbps download speed is needed.
     + Need stable internet and network proxies if there are any.
  
   - Install vzkernel-devel
     #+BEGIN_EXAMPLE
     yum install vzkernel-devel
     #+END_EXAMPLE
   - Install [[http://www.vagrantup.com/downloads.html][Vagrant]] 1.6.5 or later 
     #+BEGIN_EXAMPLE
     wget https://releases.hashicorp.com/vagrant/1.8.6/vagrant_1.8.6_x86_64.rpm
     sudo rpm -i vagrant_1.8.6_x86_64.rpm
     #+END_EXAMPLE
   - Install [[https://www.virtualbox.org/wiki/Downloads][VirtualBox]] 4.3.12 (i386) or later
     #+BEGIN_EXAMPLE
     wget http://download.virtualbox.org/virtualbox/5.1.6/VirtualBox-5.1-5.1.6_110634_el6-1.x86_64.rpm
     sudo rpm -i VirtualBox-5.1-5.1.6_110634_el6-1.x86_64.rpm
     #+END_EXAMPLE
   - (OPTIONAL) You may have to run 
     #+BEGIN_EXAMPLE
      /sbin/vboxconfig # from root account
     #+END_EXAMPLE
   - Add/Get a ubuntu 14.04 LTS box to vagrant box list from normal
     user account
     #+BEGIN_EXAMPLE
     vagrant box add ubuntu/trusyt64
     #+END_EXAMPLE
   - Create a Vagrant box with the Ubutnu-14.04 LTS
     #+BEGIN_EXAMPLE
     mkdir ~/vagrant-boxes
     cd ~/vagrant-boxes
     vagrant init
     #+END_EXAMPLE
   - The above command generates basic Vagrantfile and modify the file
     with the following info
     #+BEGIN_EXAMPLE
     base = "ubuntu/trusty64"
     #+END_EXAMPLE
     And also you can change the other required parameters in
     Vagrantfile ( as per your requirement) 

*** Install Open edX platform
     - SSH to Vagrant box 
       #+BEGIN_EXAMPLE
       cd ~/vagrant-boxes/
       vagrant up
       vagrant ssh
       #+END_EXAMPLE
     - Update and upgrade 
       #+BEGIN_EXAMPLE
       sudo apt-get update -y
       sudo apt-get upgrade -y
       #+END_EXAMPLE
     - Install Packages
       #+BEGIN_EXAMPLE 
       sudo apt-get install -y build-essential software-properties-common python-software-properties curl git-core libxml2-dev libxslt1-dev libfreetype6-dev python-pip python-apt python-dev libxmlsec1-dev swig libmysqlclient-dev
       sudo pip install --upgrade pip
       sudo pip install paramiko==1.10
       #+END_EXAMPLE

     - Clone configuration repository
       #+BEGIN_EXAMPLE 
       cd /var/tmp
       git clone https://github.com/edx/configuration
       #+END_EXAMPLE

     - Choose the release
       - Choose the required Open edX release version
         #+BEGIN_EXAMPLE
 	 export OPENEDX_RELEASE=named-release/dogwood.3 
	  
         OR
	
        #Checkout to the release verion of configuration repository

         cd /var/tmp/configuration
         git checkout <version>
         git checkout  named-release/dogwood.3 #example

         #+END_EXAMPLE

     - Configure password based SSH authentication

       Edit the =main.yaml= to and set =COMMON_SSH_PASSWORD_AUTH= to =yes= 
       #+BEGIN_EXAMPLE
       sudo vim =configuration/playbooks/roles/common_vars/defaults/main.yml
       COMMON_SSH_PASSWORD_AUTH = yes
       #+END_EXAMPLE

     - Install the ansible requirements 
       
       #+BEGIN_EXAMPLE 
       cd /var/tmp/configuration
       sudo pip install -r requirements.txt
       sudo pip install setuptools --upgrade
       #+END_EXAMPLE

     - Run the playbook
       #+BEGIN_EXAMPLE 
       cd /var/tmp/configuration/playbooks && sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"
       #+END_EXAMPLE

     - The above command will copy the platform files and runs various ansible
       playbooks to setup the platform.  When there are zero failures displayed
       in the status, the installation is successful.
  
     - Platform is ready, 
       + LMS is accessible on port 80
         #+BEGIN_EXAMPLE
         http://<public-ip> # courses dashboard
         #+END_EXAMPLE

       + CMS is accessible on port 18010
         #+BEGIN_EXAMPLE
         http://<public_ip>:18010    # Studio
         #+END_EXAMPLE

     - Login
       A default user =staff@example.com= comes with the installation.  This
       login is used to quickly test the instalaltion.  The password is =edx=
 
     - Reference
       + [[https://github.com/openedx-vlead/port-labs-to-openedx/tree/develop/src/platform-install-configure][Open edX platform installation using Manual steps provided
         by VLEAD]]  
       +
         [[https://openedx.atlassian.net/wiki/display/OpenOPS/Native+Open+edX+Ubuntu+12.04+64+bit+Installation][Native Open edX installation on Ubuntu 12.04 64-bit]]
*** Apply Theme on edX platform
    To apply comprehensive theme on dogwood3 follow the steps -
    - Once the Vagrant box is ready 
    - SSH to vagrant box from host machine 
      #+BEGIN_EXAMPLE
      cd ~/vagrant-boxes
      vagrant up  ; if not up already
      vagrant ssh
      #+END_EXAMPLE
    - Once you are entered into vagrant box perform the below steps
      #+BEGIN_EXAMPLE
      cd edx/app/edxapp/themes
      #+END_EXAMPLE
      + Clone repository
        https://github.com/openedx-vlead/vlabs-theme-for-portable-media
	#+BEGIN_EXAMPLE
	git clone https://github.com/openedx-vlead/vlabs-theme-for-portable-media starter-theme	
	#+END_EXAMPLE
      + Give proper permissions,
	#+BEGIN_EXAMPLE
	chmod -R 755 starter-theme
	#+END_EXAMPLE
      + Open /edx/app/edxapp/lms.env.json, Then change the following
        keys -
       #+BEGIN_EXAMPLE
       "COMPREHENSIVE_THEME_DIRS": ["/edx/app/edxapp/themes"]
       "ENABLE_COMPREHENSIVE_THEMING": true
       "DEFAULT_SITE_THEME": "starter-theme"
       "USE_CUSTOM_THEME": false
       "THEME_NAME": ""
       #+END_EXAMPLE

      + Save changes
      + Compile changes using the commands below -
        #+BEGIN_EXAMPLE
	sudo -H -u edxapp bash 
	cd /edx/app/edxapp/edx-platform
	source ../edxapp_env
	paver update_assets lms --setting=aws
        #+END_EXAMPLE

      + Once done, restart services using 
	#+BEGIN_EXAMPLE
        sudo /edx/bin/supervisorctl restart all	
	#+END_EXAMPLE
** One stop solution for setting up Open edX platform using vagrantbox
  - Get the Vagrantfile 
    #+BEGIN_EXAMPLE
    mkdir vagrant-boxes
    cd vagrant-boxes/
    wget http://files.virtual-labs.ac.in/downloads/open-edx-vagrant-boxes/Vagrantfile
    #+END_EXAMPLE
  - Get the vagrant box 
    #+BEGIN_EXAMPLE
    #For plain OpenedX platform
    wget http://files.virtual-labs.ac.in/downloads/open-edx-vagrant-boxes/open-edx-platform-installed-2016-09-19.box


    #For 68 labs ported onto OpenedX platform
    wget http://files.vlabs.ac.in/downloads/open-edx-vagrant-boxes/openedx-platform-wtih-68-labs.box

    #+END_EXAMPLE
  - Add downloaded box to vagrant box list 
    #+BEGIN_EXAMPLE
    #For plain edX platform
    vagrant box add plain-edx-platform open-edx-platform-installed-2016-09-19.box

    #For edX platform with 68 labs
    vagrant box add edX-platform-with-68-labs openedx-platform-wtih-68-labs.box

    #+END_EXAMPLE
  - Modify the Vagrantfile.  Search for =config.vm.box= and replace
    with the following
    #+BEGIN_EXAMPLE
    config.vm.box = "plain-edx-platform"  # For plain edX platform
    
    or 

    config.vm.box = "edX-platform-with-68-labs"  # For edX platform with 68 labs
    
    #+END_EXAMPLE
  - Run Open edX platform 
    #+BEGIN_EXAMPLE
    vagrant up
    #+END_EXAMPLE
  - That's all, you are ready to use Open edX platform.
*** Once you have Vagrant box is ready apply Comprehensive Theme
    [[Apply Theme on edX platform][Steps are here]]
** Install Nagios on host machine
   #+BEGIN_EXAMPLE
   yum install nagios nagios-plugins-all.x86_64 nagios-plugins-nrpe nrpe
   

   vim /etc/nagios/nrpe.cfg # Change the allowed_hosts values to 127.0.0.1,10.2.57.61
   service nrpe resstart
   service nrpe restart
   service nagios restart

   chkconfig nagios on
   chkconfig nrpe on
   #+END_EXAMPLE
*** Set nagiosadmin user passowrd
    #+BEGIN_EXAMPLE
    htpasswd -C /etc/nagios/passwd nagiosadmin
    #+END_EXAMPLE
    and access the nagios web console using =localhost/nagios= and
    provide user name and password.
** Install OpenVZ web console
   #+BEGIN_EXAMPLE
   git clone https://github.com/sibprogrammer/owp.git
   cd owp/build
   sh build.sh
   
   cd ..
   cd installer
   vim owp/installer/ai.sh
   update DOWNLOAD variable value to https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/ovz-web-panel/ovz-web-panel-2.4.tgz
   sh ai.sh
   
   #+END_EXAMPLE
   Then access the web console using =localhost:3000= by providing
   credentials
   user name: admin  password:admin.   Change the password if you want

** Steps for hosting labs
  - Once you are done with all the above steps, you are ready to host
    labs into portable media. Follow the steps  
  - Use working dns servers( e.g 10.4.12.160, 8.8.8.8 ) for hosting
    labs with the domain names =lab-id.{{cluster-name}}.vlabs.ac.in=
  - Open http://ads.{cluster-name}.vlabs.ac.in:8080
  - Provide the necessary details and deploy the lab await for the
    domain of the lab that will be displayed on the browser
** Feedback service integration 
   Deploy feedback service using ADS service in the cluster.

   GitHub link is https://github.com/vlead/feedback-portal.git
   
   While deploying feedback service using ADS, Lab-ID should be
   *feedback*

** Analytics-api service integration
   Deploy analytics-api service using ADS service in the cluster.

   GitHub link is https://github.com/openedx-vlead/vlabs-analytics-api-for-portable-media.git
   
   While deploying analytics-api service using ADS, Lab-ID should be
   *analytics-api*

** ELK service integration 
   Deploy vlabs-analytics service using ADS service in the cluster.

   GitHub link is https://github.com/openedx-vlead/elk-stack-for-analytics.git
   
   While deploying vlabs-analytics service using ADS, Lab-ID should be
   *analytics-api*

** Steps for accessing the labs using Wi-Fi router
   - Check the [[./user-manual-for-portablemedia.org][User Manual]] for Wifi router configuration
   - Modify the =is_amazon= variable in
     =systems-model/build/{{cluster}}/roles/common_vars/vars/main.yml=
    #+BEGIN_EXAMPLE
    is_amazon: no 
    to
    is_amazon: yes
    #+END_EXAMPLE
     Then run =site.yaml= file on config-server
     #+BEGIN_EXAMPLE
     cd systems-model/build/{{cluster}}/
     ansible-playbook -i hosts site.yaml

     or 
     You can run individual files 
     ansible-playbook -i hosts public_dns.yaml
     ansible-playbook -i hosts private_dns.yaml
     ansible-playbook -i hosts reverseproxy_server.yaml
     #+END_EXAMPLE
   - Configure the [[DNS service configuration][DNS service]]
   - Then see the [[./user-manual-for-portablemedia.org][User manual]] for other steps to access the labs over
     Wifi. 
   - Then Labs will be accessible using ={{lab-id}}.vlabs.ac.in= format

** DNS service configuration
   - Create a separate OpenVZ container for dns service 
     #+BEGIN_EXAMPLE
     vzctl create 1010 --ostemplate centos-6-x86_64  --hostname dns.vlabs.ac.in
     vzctl set 1010 --netif_add eth0,,,,br0  --save 
     vzctl set 1010 --onboot yes --save
     vzctl start 1010
     #+END_EXAMPLE
   - Configure network in dns container
     + Enter into the container
       #+BEGIN_EXAMPLE
       vzctl enter 1010
       #+END_EXAMPLE
     + Open/create the file 
       #+BEGIN_EXAMPLE
       vim /etc/sysconfig/network-scripts/ifcfg-eth0
       #+END_EXAMPLE
     + Update above file with 
       #+BEGIN_EXAMPLE
       DEVICE=eth0
       TYPE=Ethernet
       HWADDR=<MAC address of the eth0 interface>
       BOOTPROTO=static
       ONBOOT=yes
       NM_CONTROLLED=no
       IPADDR=<ip-address>
       NETMASK=<netmask>
       GATEWAY=<gateway>
       DNS1=<external-dns1>
       DNS2=<external-dns2>
       #+END_EXAMPLE

    + Enable SSH access to root account from config-server 
      - Set root password for DNS server node and remember or note it
        down somewhere
      - From config-server, perform the following steps
	#+BEGIN_EXAMPLE
	ssh-copy-id root@10.2.57.65 
	#+END_EXAMPLE
      - Provide the password when prompted for root password.

    + Since we are setting up a separate DNS server which is not a
      part of the cluster, but we are using =public_dns.yaml= playbook
      for running the ansible playbook for this server as well. It
      will try to set up the gateway as 10.100.1.1 which would throw
      error as our DNS is not a part of the cluster. To solve this
      problem, we need to comment the default gateway lines in
      =roles/common/tasks/main.yml= file in the ansible sever. Below
      lines should be commented
      #+BEGIN_EXAMPLE
      #- name: setting the default gw, skips if router or ansible server
      #  shell: route del default; route add default gw {{router_internal_ip}}
      #  when: not ( i_ans is defined or i_router is defined )
      #  ignore_errors: yes
      #
      #- name: make this route persistent after reboot
      #  lineinfile: line="route del default; route add default gw {{router_internal_ip}}" destfile=/etc/rc.local state=present regexp="route *"
      #  when: not ( i_ans is defined or i_router is defined )
      #+END_EXAMPLE
    + Run =public_dns.yml= playbook from config-server to configure
      dns service which is outside the cluster.
      #+BEGIN_EXAMPLE
      vlead$cd systems-model/build/edx/
      vlead$vim dns.txt     # inventory file for DNS service node
      #+END_EXAMPLE
      - Add the following lines to the file =dns.txt=
	#+BEGIN_EXAMPLE
	[public_dns]
	10.2.57.64        # DNS service node ip address
	#+END_EXAMPLE
      - Run =public_dns.yml=
	#+BEGIN_EXAMPLE
	vlead$ansible-playbook -i dns.txt public_dns.yml
	#+END_EXAMPLE
    + Change =/etc/resolv.conf= file 
      #+BEGIN_EXAMPLE
      vim /etc/resolv.conf
      and add
      nameserver 127.0.0.1    # as localhost has become name server 
      #+END_EXAMPLE
    + Add these entries in =/var/named/{cluster}.virtual-labs.ac.in.forward= and
      =/var/named/{cluster}.vlabs.ac.in.forward=
      #+BEGIN_EXAMPLE
      open-edx         IN    A     10.2.57.65
      labs             IN    A     10.2.57.65
      #+END_EXAMPLE
    + Restart DNS service =named=
      #+BEGIN_EXAMPLE
      service named restart
      #+END_EXAMPLE
    + You are done configuring DNS service
* Collecting logs from College Cloud
  
  A Shell script that collects logs ( analytics, feedbacks and Open
  edX user data).
** Conf.sh
   The basic configuration file. Sysadmin has to add the values to the
   fields
#+NAME: config_file
   #+BEGIN_SRC 
   #!/bin/bash
   ### Edit this file only once while installing  college cloud
   ### All feilds are needed
   
   COLLEGE_NAME=Name-of-the-college ### Replace spaces with "-" in college name
   DATE=2017-01-17
   AUTHOR=Example
   EMAIL=example@gmail.com
   #+END_SRC

** Fetch analytics and feedback
#+name: fetch_analytics   
   #+BEGIN_SRC shell
   #!/bin/sh

   source ~/script/conf.sh

   DATE=`date +"%d-%m-%Y"`
   WORKSHOP_FOLDER=workshop-analytics-$DATE
   WORKSHOP_DIR=~/college-cloud-data
   INDEX_NAME=vlabs
   CTID_ANALYTICS=280
   CTID_FEEDBACK=278
   MYSQL_USER=root
   MYSQL_PASS=root
   VAGRANT_BOX_PATH=~/vagrant-boxes/
   MYSQL_FEEDBACK_DB=feedback
   TAG=$COLLEGE_NAME-$DATE
   LOCAL_WORKSHOP_DIR=$WORKSHOP_DIR/$WORKSHOP_FOLDER
   EDX_AUTH_USER_DATA=edx-auth-user-data.sql
   EDX_AUTH_REGISTRATION_DATA=edx-auth-registration-data.sql
   DEST=/var/www/html/college-cloud-data/
   ELKDATE=`date +"%Y-%m-%d"`
   
   mkdir $WORKSHOP_DIR
   mkdir $LOCAL_WORKSHOP_DIR

   # Take elasticdump - the logs captured in ELK server
   # Details 
   # 1. Logs gets copied in localmachine in ~/college-cloud-data/workshop-analytics-$DATE folder
   # 2. Two logs files - vlabs_mapping_$DATE.json and vlabs_data_$DATE.json files are generated.
   # 3. Log files will not be generated in case they already exist.
   
   echo "`date`: Executing elasticdump command " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
   echo "`sudo vzctl exec $CTID_ANALYTICS elasticdump --input=http://localhost:9200/$INDEX_NAME --output=/root/vlabs_mapping_$DATE.json --type=mapping`"
   echo "`sudo vzctl exec $CTID_ANALYTICS elasticdump --input=http://localhost:9200/$INDEX_NAME --output=/root/vlabs_data_$DATE.json --type=data`"
   echo "`date`: Finished Executing elasticdump command " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
   
   echo "`sudo cp /vz/private/280/root/vlabs_mapping_$DATE.json $LOCAL_WORKSHOP_DIR/`"
   echo "`sudo cp /vz/private/280/root/vlabs_data_$DATE.json $LOCAL_WORKSHOP_DIR/`"
   echo "`date`: Copied files in $LOCAL_WORKSHOP_DIR " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
   
   # Take mysqldump of feedback - only sql dump is captured and needed
   # Details -
   # 1. SQLdump  gets copied in ~/college-cloud-data/workshop-analytics-$DATE folder
   # 2. filename will be feedbackdump-$DATE.sql 
   
   
   full_dump()
   {
    echo "----FULL DUMP----"
    echo "`date`: Start Mysql dump for feedback " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
    echo "`sudo vzctl exec $CTID_FEEDBACK mysqldump -u $MYSQL_USER -p$MYSQL_PASS $MYSQL_FEEDBACK_DB`" > $LOCAL_WORKSHOP_DIR/feedbackdump-$DATE.sql
    echo "`date`: End Mysql dump for feedback " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
    
    
    # Take mysql dump of open edx platform (auth_user and auth_registratiom) table 
    # Details  
    # 1. SQLdump  gets copied in ~/college-cloud-data/workshop-analytics-$DATE folder
    # 2. filename will be feedbackdump-$DATE.sql 
    
    cd $VAGRANT_BOX_PATH
    echo " Mysqldump is in progress"
    
    echo "`date`: Start Mysql dump for Open edx platform " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
    echo "`vagrant ssh -c 'mysqldump -uroot edxapp auth_user'`" > $LOCAL_WORKSHOP_DIR/$EDX_AUTH_USER_DATA
    echo "`vagrant ssh -c 'mysqldump -uroot edxapp auth_user'`" > $LOCAL_WORKSHOP_DIR/$EDX_AUTH_REGISTRATION_DATA
    echo "`date`: End Mysql dump for Open edX " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
    cd -
    
    # Compress the folder 
    
    echo "`date`: Start Compressing " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
    echo "`tar -zvcf $TAG-FULL-DUMP.tar.gz $LOCAL_WORKSHOP_DIR`"
    #mv  $TAG.tar.gz  $WORKSHOP_DIR
    sudo mv  $TAG-FULL-DUMP.tar.gz  $DEST
    echo "`date`: File Compressed - Look for file - $TAG-FULL-DUMP.tar.gz " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
   }

   datewise_dump()
   {
     echo "-----DATE-WISE-DUMP------"
     echo "`date`: Start Mysql dump for feedback " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
     echo "`python ~/script/feedback-dump.py`"
     echo "`mv feedback-dump-$DATE.json  $LOCAL_WORKSHOP_DIR/feedbackdump-$DATE.sql`" 
     echo "`date`: End Mysql dump for feedback " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
    
     echo "`date`: Start Vlabs analytics from ELK " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
     curl -XGET 'http://vlabs-analytics.vlabs.ac.in:9200/vlabs/_search?pretty&size=1000' -d '{ "query" : { "term" : { "DATE_OF_EXPERIMENT": $ELKDATE }}}' > vlabs-analytics-$DATE.json
     echo "`mv vlabs-analytics-$DATE.json  $LOCAL_WORKSHOP_DIR`" 
     echo "`date`: End VLabs analytics dump  " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
     
     ## Take mysql dump of open edx platform (auth_user and auth_registratiom) table 
     # Details  
     # 1. SQLdump  gets copied in ~/college-cloud-data/workshop-analytics-$DATE folder
     # 2. filename will be feedbackdump-$DATE.sql 
     
     # Compress the folder 
     
     echo "`date`: Start Compressing " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
     echo "`tar -zvcf $TAG-DATEWISE-DUMP.tar.gz $LOCAL_WORKSHOP_DIR`"
     echo "`sudo mv  $TAG-DATEWISE-DUMP.tar.gz $DEST`"
     echo "`date`: File Compressed - Look for file - $TAG-DATEWISE-DUMP.tar.gz " >> $LOCAL_WORKSHOP_DIR/exec-status-$DATE.txt
   }

   
   if [ "$1" = "full" ]
   then
   full_dump
   else 
   datewise_dump
   fi
   
   #+END_SRC
* Tangling
  #+BEGIN_SRC shell :tangle conf.sh
  <<config_file>>
  #+END_SRC
  #+BEGIN_SRC shell :tangle fetch_analytics.sh 
  <<fetch_analytics>>  
  #+END_SRC

